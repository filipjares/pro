# 
# Packages & settings
# 
> restart:
> with(ListTools):
> with(LinearAlgebra):
> with(PolynomialTools):
> with(combinat, choose):
> with(Groebner):
> with(MatrixPolynomialAlgebra):
> interface(rtablesize=24):
> interface(warnlevel=0):
> Digits:=30:
> eps:=1e-6:
# 
# Definice procedur
> # Two one-parametric motions transformatin in DH-convention(phi, theta, a,d) indexed by i
> # c = cos(phi), s = sin(phi), lambda = cos(alpha), mu = sin(alpha)
> dhTs := proc(i)
> local M1, M2;
>    M1:=Matrix(4,4,[[+cat(`c`,i),-cat(`s`,i),0,         0],
>                   [ +cat(`s`,i),+cat(`c`,i),0,         0],
>                   [           0,          0,1,cat(`d`,i)],
>                   [           0,          0,0,         1]]);
>    M2:=Matrix(4,4,[[1,        0,          0,cat(`a`,i)],  
>                   [ 0,+cat(`lambda`,i),-cat(`mu`,i),         0],
>                   [ 0,+cat(`mu`,i),+cat(`lambda`,i),         0],
>                   [ 0,          0,          0,         1]]);
>    [M1,M2];
> end proc:
> #
> # Inverse of the DH-convention for one-aprametric DH rigid motion transformations
> dhInvs := proc(M)
>    local M1, M2;
>    M1 := M[1];
>    M2 := M[2];
>    [simplify(MatrixInverse(M2),{M2[3,2]^2+M2[3,3]^2=1}),
>     simplify(MatrixInverse(M1),{M1[1,1]^2+M1[2,1]^2=1})];
> end proc:
> #
> # Rigid motion transformatin in DH-convention(phi, theta, a,d) indexed by i
> # c = cos(phi), s = sin(phi), P = cos(alpha), R = sin(alpha)
> dhT := proc(i)
> local M;
>    M:=dhTs(i);
>    M[1].M[2];
> end proc:
> #
> # Inverse of the DH-convention rigid motion transformation
> dhInv := proc(M)
>    simplify(MatrixInverse(M),{M[1,1]^2+M[2,1]^2=1,M[3,2]^2+M[3,3]^2=1});
> end proc:
> #
> # Simplify using trigonometric indentities c^2+s^2=1 & lambda^2+mu^2=1
> dhSimpl := proc(M,i)
>    simplify(M,{cat(`c`,i)^2+cat(`s`,i)^2=1,cat(`lambda`,i)^2+cat(`mu`,i)^2=1});
> end proc:
> #
> ## Direct Kinematic Task
> #
> dhDKT := proc(p)
>    subs(p,dhT(1).dhT(2).dhT(3).dhT(4).dhT(5).dhT(6));   
> end proc:
> #
> # Simplify using Rotation matrin in Mh
> MhSimpl := proc(M)
>  simplify(
>   simplify(
>    simplify(
>     simplify(M,
>             {lx^2+ly^2+lz^2=1,mx^2+my^2+mz^2=1,nx^2+ny^2+nz^2=1}),
>            {lx*mx+ly*my+lz*mz=0,lx*nx+ly*ny+lz*nz=0,mx*nx+my*ny+mz*nz=0}),
>           {lx^2+mx^2+nx^2=1,ly^2+my^2+ny^2=1,lz^2+mz^2+nz^2=1}),
>          {lx*ly+mx*my+nx*ny=0,lx*lz+mx*mz+nx*nz=0,lz*ly+mz*my+nz*ny=0});
> end proc:
> #
> # Simplify a general motion matrix using rotation matrix identities in columns
> rcSimp := proc(M,R)
>        simplify(
>         simplify(
>          simplify(
>           simplify(
>            simplify(
>             simplify(M,{R[1,1]*R[1,1]+R[2,1]*R[2,1]+R[3,1]*R[3,1]=1}),
>                 {R[1,1]*R[1,2]+R[2,1]*R[2,2]+R[3,1]*R[3,2]=0}),
>                {R[1,1]*R[1,3]+R[2,1]*R[2,3]+R[3,1]*R[3,3]=0}),
>               {R[1,2]*R[1,2]+R[2,2]*R[2,2]+R[3,2]*R[3,2]=1}),
>              {R[1,2]*R[1,3]+R[2,2]*R[2,3]+R[3,2]*R[3,3]=0}),
>             {R[1,3]*R[1,3]+R[2,3]*R[2,3]+R[3,3]*R[3,3]=1});
> end proc:
> #
> # Simplify a general motion matrix using rotation matrix identities in rows
> rrSimp := proc(M,R)
>        simplify(
>         simplify(
>          simplify(
>           simplify(
>            simplify(
>             simplify(M,{R[1,1]*R[1,1]+R[1,2]*R[1,2]+R[1,3]*R[1,3]=1}),
>                        {R[1,1]*R[2,1]+R[1,2]*R[2,2]+R[1,3]*R[2,3]=0}),
>                        {R[1,1]*R[3,1]+R[1,2]*R[3,2]+R[1,3]*R[3,3]=0}),
>                        {R[2,1]*R[2,1]+R[2,2]*R[2,2]+R[2,3]*R[2,3]=1}),
>                        {R[2,1]*R[3,1]+R[2,2]*R[3,2]+R[2,3]*R[3,3]=0}),
>                        {R[3,1]*R[3,1]+R[3,2]*R[3,2]+R[3,3]*R[3,3]=1});
> end proc:
> #
> # Matrix representation of a set of polynomials 
> PolyCoeffMatrix:=proc(S,m,Ord::{ShortTermOrder, TermOrder}) 
> local A,v,i,j,k,c,q;
>         A:=Matrix(nops(S),nops(m),storage=sparse);
>         v:=indets(m);
>         for i from 1 to nops(S) do
>                 c:=[coeffs(expand(S[i]),v,'q')];
>                 q:=[q];
>         	      for j from 1 to nops(m) do
>                         for k from 1 to nops(q) do
>                                 if (m[j]=q[k]) then A[i,j]:=c[k] end if
>                         end do
>          	      end do
>         end do;
>         Matrix(A);
> end proc:
> #
> ## Cartesian product of a two lists
> #
> LxL:=proc(X::list,Y::list)
>      Flatten(map(x->(map(y->Flatten([x,y]),Y)),X),1);
> end proc:
> #
> ## n x 1 matrix to a list conversion
> #
> M2L:=proc(M) 
> 	convert(convert(M,Vector),list);
> end proc:
> #
> ## Highlit non-zero entries
> #
> spy:=proc(A)
>    map(x->`if`(simplify(x)=0,0, `if`(simplify(x)=1,1,`*`)) ,A):
> end proc:
> #
> # Monomials of a set of polynomial in all indeterminates
> #
> PolyMonomials:=proc(S::list(ratpoly),Ord::{ShortTermOrder, TermOrder}) # Monomials of a set of polynomials
> local v,m,i,c,q;
>         v:=indets(S);
>         m:=[];
>         for i from 1 to nops(S) do
>                 c:=[coeffs(expand(S[i]),v,'q')];
>                 m:=[op(m),q];
>         end do;
>         m:=MakeUnique(m);
>         sort(m,(t1,t2)->testorder(t2,t1,Ord));
> end proc:
> #
> ## Monomias of a set of polynomials in given indeterminates
> #
> PolyVarsMonomials:=proc(S::list(ratpoly),Ord::{ShortTermOrder, TermOrder}) # Monomials of a set of polynomials in variavbles of Ord
> local v,m,i,c,q;
>         v:={op(Ord)};
>         m:=[];
>         for i from 1 to nops(S) do
>                 c:=[coeffs(expand(S[i]),v,'q')];
>                 m:=[op(m),q];
>         end do;
>         m:=MakeUnique(m);
>         sort(m,(t1,t2)->testorder(t2,t1,Ord));
> end proc:
# 
# Definice procedury
> IK6 := proc(Mechanism, MhV)
>     #local M31,M32,M41,M42,M51,M52,iM22,iM21,iM12,iM11,Mh,iM62,iM61,
>     #local ee1,ee2,l2,p2,l1,p1,pxl1,pxl2,m1x
>     
>     M31 :=dhTs(3)[1]:
>     M32 :=dhTs(3)[2]:
>     M41 :=dhTs(4)[1]:
>     M42 :=dhTs(4)[2]:
>     M51 :=dhTs(5)[1]:
>     M52 :=dhTs(5)[2]:
>     iM22:=dhInvs(dhTs(2))[1]:
>     iM21:=dhInvs(dhTs(2))[2]:
>     iM12:=dhInvs(dhTs(1))[1]:
>     iM11:=dhInvs(dhTs(1))[2]:
>     Mh := Matrix(4,4,[[lx,mx,nx,rx],[ly,my,ny,ry],[lz,mz,nz,rz],[0,0,0,1]]):
>     iM62:=dhInvs(dhTs(6))[1]:
>     iM61:=dhInvs(dhTs(6))[2]:
>     ee1:=dhSimpl((<<1,0,0,0>|<0,-1,0,0>|<0,0,1,0>|<0,0,d2,1>>.
>                     dhInv(iM22).M31.M32.M41.M42.M51.M52)[1..3,3..4],2):
>     ee2:=dhSimpl((<<1,0,0,0>|<0,-1,0,0>|<0,0,1,0>|<0,0,d2,1>>.
>                     iM21.iM12.iM11.Mh.iM62.iM61)[1..3,3..4],2):
>     l2:=ee1[1..3,1..1]:
>     p2:=ee1[1..3,2..2]:
>     l1:=ee2[1..3,1..1]:
>     p1:=ee2[1..3,2..2]:
>     pp1:=MhSimpl(dhSimpl(dhSimpl(dhSimpl(Transpose(p1).p1,2),1),6)):
>     pp2:=dhSimpl(dhSimpl(dhSimpl(dhSimpl(Transpose(p2).p2,2),3),4),5):
>     pl1:=MhSimpl(dhSimpl(dhSimpl(dhSimpl(Transpose(p1).l1,2),1),6)):
>     pl2:=dhSimpl(dhSimpl(dhSimpl(dhSimpl(Transpose(p2).l2,2),3),4),5):
>     pxl1:=map(x->expand(x),convert(CrossProduct(convert(p1,Vector),convert(l1,Vector)),Matrix)):
>     pxl2:=map(x->expand(x),convert(CrossProduct(convert(p2,Vector),convert(l2,Vector)),Matrix)):
>     m1x:=map(x->expand(x),MhSimpl(dhSimpl(dhSimpl(dhSimpl(pxl1,2),1),6))):
>     m2x:=map(x->expand(x),dhSimpl(dhSimpl(dhSimpl(dhSimpl(pxl2,2),3),4),5)):
>     plpl1:=map(x->expand(x),ScalarMultiply(l1,pp1[1,1]) - ScalarMultiply(p1,2*pl1[1,1])):
>     plpl2:=map(x->expand(x),ScalarMultiply(l2,pp2[1,1]) - ScalarMultiply(p2,2*pl2[1,1])):
>     mp1:=MhSimpl(dhSimpl(dhSimpl(dhSimpl(simplify(plpl1),2),1),6)):
>     mp2:=dhSimpl(dhSimpl(dhSimpl(dhSimpl(dhSimpl(simplify(plpl2),2),3),4),5),1):
>     E1:=<p1,l1,pp1,pl1,m1x,mp1>:
>     E2:=<p2,l2,pp2,pl2,m2x,mp2>:
> 
>     t1:=<<s1*s2,s1*c2,c1*s2,c1*c2,s1,c1,s2,c2,1>>:
>     t2:=<<s4*s5,s4*c5,c4*s5,c4*c5,s4,c4,s5,c5,1>>:
>     M1:=PolyCoeffMatrix(M2L(E1),M2L(t1),plex(op(indets(tE1)))):
>     M2:=PolyCoeffMatrix(M2L(E2),M2L(t2),plex(op(indets(tE2)))):
> 
>     P:= <M2[1..14,1..8]|M2[1..14,9]-M1[1..14,9]>:
>     Q:=  M1[1..14,1..8]:
>     p:= t2:
>     q:= <t1[1..8,1]>:
> 
>     MPh := {op(MhV), op(Mechanism)}:
>     Qx := simplify(evalf(subs(MPh, Q))):
>     Px := simplify(evalf(subs(MPh, P))):
>     QxR := convert(Qx, rational, exact):
>     PxR := convert(Px, rational, exact):
> 
>     U, S, Vt := SingularValues(QxR, output=[':-U', ':-S', ':-Vt']):
>     A  := Transpose(U).PxR:
>     A8 := A[1..8,1..9]:
>     Z  := A[9..14,1..9]:
> 
>     x:=subs([s4=(2*x4)/(1+x4^2),c4=(1-x4^2)/(1+x4^2),s5=(2*x5)/(1+x5^2),c5=(1-x5^2)/(1+x5^2)],p):
>     y:=ScalarMultiply(x, (1+x4^2)*(1+x5^2)):
>     qy := simplify(Z.y):
>     mMy := PolyVarsMonomials(M2L(qy),plex(x4,x5)):
>     My := PolyCoeffMatrix(M2L(qy), mMy, plex(x4,x5)):
> 
>     qyy:=simplify(<simplify(x4*qy),qy>):
>     myy:=PolyVarsMonomials(M2L(qyy),plex(x4,x5));
>     Myy:=PolyCoeffMatrix(M2L(qyy),myy,plex(x4,x5)):
>     Mx3:=simplify((1+x3^2)*subs([s3=(2*x3)/(1+x3^2),c3=(1-x3^2)/(1+x3^2)],Myy)):
>     
>     dx3:=sort(Determinant(evalf(Mx3)));
>     nf:=LeadingCoefficient(dx3,tdeg(x3))^(1/12);
>     dx3nf:=sort(Determinant(evalf(Mx3)/nf));
>     dx3n := sort(dx3nf/LeadingCoefficient(dx3nf, tdeg(x3)));
>     Cx3 := CompanionMatrix(dx3n, x3):
>     x3s:=Eigenvalues(Cx3);    # solutions
> 
>     x3sR:=<select(proc(x) abs(Im(x))=0 end proc, M2L(x3s))>:
>     x3s:=map(x->convert(Re(x),rational),x3sR);evalf(x3s): # real solutions
> 
>     solutions := [];
>     for ixs from 1 to Dimension(x3s) do
>         Mx3s:=subs(x3=x3s[ixs],Mx3):
>         sv,V:= SingularValues(Mx3s, output=[':-S',':-Vt']):
>         myys := Transpose(V[12..12,1..12])/V[12,12]:
> 
>         x4s:=myys[9,1]/myys[12,1]:
>         x5s:=myys[11,1]/myys[12,1]:
>         s3s := subs(x3=x3s[ixs],evalf((2*x3)/(1+x3^2))):
>         c3s := subs(x3=x3s[ixs],evalf((1-x3^2)/(1+x3^2))):
>         s4s := subs(x4=x4s,evalf((2*x4)/(1+x4^2))):
>         c4s := subs(x4=x4s,evalf((1-x4^2)/(1+x4^2))):
>         s5s := subs(x5=x5s,evalf((2*x5)/(1+x5^2))):
>         c5s := subs(x5=x5s,evalf((1-x5^2)/(1+x5^2))):
>         S345:={s3=s3s,c3=c3s,s4=s4s,c4=c4s,s5=s5s,c5=c5s}:
>         qs:=Transpose(Vt).DiagonalMatrix(map(s->1/s,S[1..8])).subs(S345,A8.p):
> 
>         s1s:=qs[5,1]:
>         c1s:=qs[6,1]:
>         s2s:=qs[7,1]:
>         c2s:=qs[8,1]:
>         S12:={s1=s1s,c1=c1s,s2=s2s,c2=c2s}:
> 
>         e61:=dhSimpl((<<1,0,0,0>|<0,-1,0,0>|<0,0,1,0>|<0,0,d2,1>>.
>                         dhInv(iM22).M31.M32.M41.M42.M51.M52)[1..3,1..2],2):
>         e62:=dhSimpl((<<1,0,0,0>|<0,-1,0,0>|<0,0,1,0>|<0,0,d2,1>>.
>                         iM21.iM12.iM11.Mh.iM62.iM61)[1..3,1..2],2):
>         e61v:=subs(S12,subs(S345,evalf(subs(MPh,e61)))):
>         e62v:=subs(S12,subs(S345,evalf(subs(MPh,e62)))):
>         e6:=convert(map(p->sort(p),e62v-e61v),Vector):
>         t6:=[c6,s6,1]:
>         M6:=PolyCoeffMatrix(M2L(e6),t6):
>         cs6s:=MatrixInverse(-M6[1..2,1..2]).M6[1..2,3..3]:
>         c6s:=cs6s[1,1]:
>         s6s:=cs6s[2,1]:
>         S6:={s6=cs6s[2,1],c6=cs6s[1,1]}:
>         solutions := [op(solutions), evalf(subs(S12, S345, S6,
>             <arctan(s1,c1), arctan(s2,c2), arctan(s3,c3),
>              arctan(s4,c4), arctan(s5,c5), arctan(s6,c6)>))];
>     end do;
> 
>     solutions:
> end proc:
# Zadani
# Zadani z dokumentu PRO-2011-Lecture-05-IK-6R.pdf:
> # Mechanism := {
> # a1=85,  a2=280,  a3=100, a4=0.1, a5=-0.1, a6=0.1,
> # d1=350, d2=-0.1, d3=0.1, d4=315, d5=-0.1, d6=85,
> # lambda1=cos(-Pi/2-Pi/100), mu1=sin(-Pi/2-Pi/100),
> # lambda2=cos(Pi/110),       mu2=sin(Pi/110),
> # lambda3=cos(-Pi/2-Pi/90),  mu3=sin(-Pi/2-Pi/90),
> # lambda4=cos(Pi/2-Pi/120),  mu4=sin(Pi/2-Pi/120),
> # lambda5=cos(-Pi/2-Pi/95),  mu5=sin(-Pi/2-Pi/95),
> # lambda6=cos(-Pi/200),      mu6=sin(-Pi/200)}:
> #rndTh := [Pi/4, Pi/20, -2*Pi/25, -9*Pi/200, -Pi/4, -11*Pi/100];
> # thetas := map(x->x[1]=x[2],convert(<convert([theta1,theta2,theta3,theta4,theta5,theta6],Vector)|
> #                            convert(simplify(rndTh),Vector)>,listlist)):
> # Position := subs(thetas,{c1=cos(theta1),s1=sin(theta1),c2=cos(theta2),s2=sin(theta2),c3=cos(theta3),s3=sin(theta3),
> #                         c4=cos(theta4),s4=sin(theta4),c5=cos(theta5),s5=sin(theta5),c6=cos(theta6),s6=sin(theta6)}):
> # MP := {op(Mechanism),op(Position)}:
> # MhV := Matrix(4,4,[[lx,mx,nx,rx],[ly,my,ny,ry],[lz,mz,nz,rz],[0,0,0,1]]):
> # MhV := map(x->x[1]=x[2],convert(<convert(MhV[1..3,1..4],Vector)|convert(dhDKT(MP)[1..3,1..4],Vector)>,listlist)):
# Zadani ze souboru:
> read "Assig03.m";
# 
# 
# Reseni ulohy
# Vypocet
> solutions := IK6(Mechanism,MhV);
     [Vector[column](%id = 140254884), Vector[column](%id = 140078868)]
# Kontrola
> # zadana matice je ve tvaru
> Mh := Matrix(4,4,[[lx,mx,nx,rx],[ly,my,ny,ry],[lz,mz,nz,rz],[0,0,0,1]]):
> # porovnani meho vysledku se zadanou matici (dosazeni konkretnich zadanych hodnot)
> Mh := Matrix(4,4,[[lx,mx,nx,rx],[ly,my,ny,ry],[lz,mz,nz,rz],[0,0,0,1]]):
> Mh := subs(evalf(MhV), Mh):
> #
> MatrixDiffs := []:
> diffs := []:
> for i from 1 to nops(solutions) do
>     thetas := map(x->x[1]=x[2],
>         convert(<convert([theta1,theta2,theta3,theta4,theta5,theta6],Vector)|
>                     convert(simplify(solutions[i]),Vector)>,listlist)):
>     Position := subs(thetas,
>         {c1=cos(theta1),s1=sin(theta1),c2=cos(theta2),s2=sin(theta2),c3=cos(theta3),s3=sin(theta3),
>          c4=cos(theta4),s4=sin(theta4),c5=cos(theta5),s5=sin(theta5),c6=cos(theta6),s6=sin(theta6)}):
>     # kontrolovany vysledek
>     M := subs(Mechanism,Position, dhT(1).dhT(2).dhT(3).dhT(4).dhT(5).dhT(6)):
>     # porovnani vysledku se zadanim
>     DD := evalf(M - Mh);
>     MatrixDiffs := [op(MatrixDiffs), DD]:
>     diffs := [op(diffs), Norm(DD, Frobenius)]:
> end do:
> #MatrixDiffs;
> max(diffs);
                                                      -13
                    2.48369592691335976197443469041 10   
> alphas := map(x->x[1]=x[2], convert(<<alpha1, alpha2, alpha3, alpha4, alpha5, alpha6>|evalf(subs(Mechanism, <arctan(mu1, lambda1), arctan(mu2, lambda2), arctan(mu3, lambda3), arctan(mu4, lambda4), arctan(mu5, lambda5), arctan(mu6, lambda6)>))>, listlist));
              [alpha1 = -1.56206968053492497134670323780, 

                alpha2 = -0.00628318530717958647692528676656, 

                alpha3 = -1.57044726094449775331593695349, 

                alpha4 = 1.57254165604689094880824538241, 

                alpha5 = -1.58161736815726146260824857440, 

                alpha6 = 0.0165806278939461309807750623007]
(6.3)> CodeGeneration['Matlab'](  );
alpha1 = -0.156206968053492497134670323780e1;
alpha2 = -0.628318530717958647692528676656e-2;
alpha3 = -0.157044726094449775331593695349e1;
alpha4 = 0.157254165604689094880824538241e1;
alpha5 = -0.158161736815726146260824857440e1;
alpha6 = 0.165806278939461309807750623007e-1;
> Mechanism;
{a1 = 309.740000000000000000000000000, a2 = 211.030000000000000000000000000, 

  a3 = 224.690000000000000000000000000, a4 = 0.990000000000000000000000000000, 

  a5 = 0.260000000000000000000000000000, 

  a6 = 0.0900000000000000000000000000000, 

  d1 = 117.140000000000000000000000000, 

  d2 = -0.380000000000000000000000000000, 

  d3 = -0.150000000000000000000000000000, 

  d4 = 223.410000000000000000000000000, 

  d5 = -0.0300000000000000000000000000000, 

  d6 = 482.880000000000000000000000000, 

  mu1 = -0.999961923064171288737355164827, 

  mu2 = -0.00628314396555895124973531015796, 

  mu3 = -0.999999939076516661270093868198, 

  mu4 = 0.999998476913287698802901247926, 

  mu5 = -0.999941453103215767885140850206, 

  mu6 = 0.0165798681876975283169352843833, 

  lambda1 = 0.00872653549837393496488821397089, 

  lambda2 = 0.999980260856137129848673660430, 

  lambda3 = 0.000349065843310096712961605837775, 

  lambda4 = -0.00174532836589830883577820272211, 

  lambda5 = -0.0108208301820766583079873738957, 

  lambda6 = 0.999862544538437331035781244372}
> with(CodeGeneration, Matlab);
                                  [Matlab]
> Matlab(convert(Mechanism, list));
a1 = 0.309740000000000000000000000000e3;
a2 = 0.211030000000000000000000000000e3;
a3 = 0.224690000000000000000000000000e3;
a4 = 0.990000000000000000000000000000e0;
a5 = 0.260000000000000000000000000000e0;
a6 = 0.900000000000000000000000000000e-1;
d1 = 0.117140000000000000000000000000e3;
d2 = -0.380000000000000000000000000000e0;
d3 = -0.150000000000000000000000000000e0;
d4 = 0.223410000000000000000000000000e3;
d5 = -0.300000000000000000000000000000e-1;
d6 = 0.482880000000000000000000000000e3;
mu1 = -0.999961923064171288737355164827e0;
mu2 = -0.628314396555895124973531015796e-2;
mu3 = -0.999999939076516661270093868198e0;
mu4 = 0.999998476913287698802901247926e0;
mu5 = -0.999941453103215767885140850206e0;
mu6 = 0.165798681876975283169352843833e-1;
lambda1 = 0.872653549837393496488821397089e-2;
lambda2 = 0.999980260856137129848673660430e0;
lambda3 = 0.349065843310096712961605837775e-3;
lambda4 = -0.174532836589830883577820272211e-2;
lambda5 = -0.108208301820766583079873738957e-1;
lambda6 = 0.999862544538437331035781244372e0;
> Matlab(solutions);
cg = [[0.299415491086153597589739213492e0 -0.198897780675163816990859528252e1 -0.731395360971540487031607865774e0 -0.669718017533275309528796377239e0 -0.249715397561450500521476962695e1 -0.154997402268028320582782161353e0] [0.297753170390232430399261081988e0 -0.192841429052853480058287599080e1 -0.832172987350896333112722687066e0 -0.635997979426733659716934599484e0 -0.246492850259159191484182944300e1 -0.114668131856026971523728129735e0]];
> 
# 
# 
